//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Values = newValuesTable("public", "values", "")

type valuesTable struct {
	postgres.Table

	// Columns
	ID         postgres.ColumnInteger
	PropertyID postgres.ColumnInteger
	Value      postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ValuesTable struct {
	valuesTable

	EXCLUDED valuesTable
}

// AS creates new ValuesTable with assigned alias
func (a ValuesTable) AS(alias string) *ValuesTable {
	return newValuesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ValuesTable with assigned schema name
func (a ValuesTable) FromSchema(schemaName string) *ValuesTable {
	return newValuesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ValuesTable with assigned table prefix
func (a ValuesTable) WithPrefix(prefix string) *ValuesTable {
	return newValuesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ValuesTable with assigned table suffix
func (a ValuesTable) WithSuffix(suffix string) *ValuesTable {
	return newValuesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newValuesTable(schemaName, tableName, alias string) *ValuesTable {
	return &ValuesTable{
		valuesTable: newValuesTableImpl(schemaName, tableName, alias),
		EXCLUDED:    newValuesTableImpl("", "excluded", ""),
	}
}

func newValuesTableImpl(schemaName, tableName, alias string) valuesTable {
	var (
		IDColumn         = postgres.IntegerColumn("id")
		PropertyIDColumn = postgres.IntegerColumn("property_id")
		ValueColumn      = postgres.StringColumn("value")
		allColumns       = postgres.ColumnList{IDColumn, PropertyIDColumn, ValueColumn}
		mutableColumns   = postgres.ColumnList{PropertyIDColumn, ValueColumn}
	)

	return valuesTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:         IDColumn,
		PropertyID: PropertyIDColumn,
		Value:      ValueColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
